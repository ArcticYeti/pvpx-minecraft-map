from nbtlib import List, String
from mecha import Mecha
import logging
import base64
import re
from lightning_rod:api import raw_cmd

mc = ctx.inject(Mecha)
logger = logging.getLogger('runic_items')

def pascal_to_snake_case(text):
    return re.sub(r'(?<!^)(?=[A-Z])', '_', text).lower()

macro mc_return return_code=brigadier:integer:
    raw_cmd(f"return {return_code.value}")

macro mc_return:
    raw_cmd('return 0')

def base64_encode(s: str) -> str:
    return base64.b64encode(s.encode()).decode()

# selector parser
def selector(value):
    return mc.parse(value, using="selector")

# seconds to ticks converter
def seconds_to_ticks(amount_seconds):
    return int(amount_seconds * 20)

# summon override to allow nesting
_SUMMON_INIT_TAG = f"{ctx.project_id}.summon.init"
_incr = -1

macro
    summon
        entity=minecraft:entity_summon
        pos=minecraft:vec3
        nbt=minecraft:nbt_compound_tag
        body=mecha:nested_root:

    global _incr

    _incr += 1

    nbt = nbt.evaluate()
    nbt.setdefault("Tags", List[String]()).append(String(_SUMMON_INIT_TAG))
    summon entity pos nbt
    as @e[type=entity.get_canonical_value(), tag=_SUMMON_INIT_TAG]:
        execute function ~/summon_helper/nested_{_incr}:
            yield body
            tag @s remove _SUMMON_INIT_TAG

# Overload to make nbt optional 
macro
    summon
        entity=minecraft:entity_summon
        pos=minecraft:vec3
        body=mecha:nested_root:
    summon entity pos {}:
        yield body

# Overload to make pos optional 
macro
    summon
        entity=minecraft:entity_summon
        body=mecha:nested_root:
    summon entity ~ ~ ~:
        yield body
